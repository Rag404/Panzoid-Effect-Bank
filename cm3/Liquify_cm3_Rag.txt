[{"data":[{"type":1,"properties":{"name":"Liquify","enabled":{"animated":false,"keyframes":[{"value":1,"frame":0,"tween":0,"controlPoints":[[-10,0],[10,0]]}]},"fragShader":"// Ported to CM3 by @Rag\n\nprecision highp float;\nprecision highp int;\n\nuniform sampler2D tDiffuse;\nuniform vec2 resolution;\nvarying vec2 vUvScaled;\n\n// Noise map parameters\nuniform float time;\nuniform vec2 scale, offset;\nuniform vec3 period;\n\n// Displacement parameters\nuniform float amount, angle;\nuniform vec3 rgbDisplacement;\n\n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\nvec4 permute(vec4 x) {\n  return mod289(((x*34.0)+10.0)*x);\n}\nvec4 taylorInvSqrt(vec4 r) {\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\nvec3 fade(vec3 t) {\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\n\n\n// Noise functions author: Stefan Gustavson (stefan.gustavson@liu.se)\n// Copyright (c) 2011 Stefan Gustavson. All rights reserved.\n// Distributed under the MIT license. See LICENSE file.\n// https://github.com/stegu/webgl-noise\n\n// Classic Perlin noise, periodic variant\nfloat pnoise(vec3 P, vec3 rep) {\n  vec3 Pi0 = mod(floor(P), rep); // Integer part, modulo period\n  vec3 Pi1 = mod(Pi0 + vec3(1.0), rep); // Integer part + 1, mod period\n  Pi0 = mod289(Pi0);\n  Pi1 = mod289(Pi1);\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = Pi0.zzzz;\n  vec4 iz1 = Pi1.zzzz;\n\n  vec4 ixy = permute(permute(ix) + iy);\n  vec4 ixy0 = permute(ixy + iz0);\n  vec4 ixy1 = permute(ixy + iz1);\n\n  vec4 gx0 = ixy0 * (1.0 / 7.0);\n  vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\n  gx0 = fract(gx0);\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n  vec4 sz0 = step(gz0, vec4(0.0));\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n  vec4 gx1 = ixy1 * (1.0 / 7.0);\n  vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\n  gx1 = fract(gx1);\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n  vec4 sz1 = step(gz1, vec4(0.0));\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n  g000 *= norm0.x;\n  g010 *= norm0.y;\n  g100 *= norm0.z;\n  g110 *= norm0.w;\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n  g001 *= norm1.x;\n  g011 *= norm1.y;\n  g101 *= norm1.z;\n  g111 *= norm1.w;\n\n  float n000 = dot(g000, Pf0);\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n  float n111 = dot(g111, Pf1);\n\n  vec3 fade_xyz = fade(Pf0);\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); \n  return 2.2 * n_xyz;\n}\n\n\nvoid main() {\n  vec3 coord = vec3(\n    vUvScaled * (resolution/100.0) * scale + offset,\n    time\n  );\n  float map = pnoise(coord, period);\n\n  float _amount = amount / 100.0;\n  float dispR = _amount * rgbDisplacement.r * map;\n  float dispG = _amount * rgbDisplacement.g * map;\n  float dispB = _amount * rgbDisplacement.b * map;\n\n  vec2 _angle = vec2(\n    sin(radians(angle)),\n    cos(radians(angle))\n  );\n  vec2 posR = vUvScaled - dispR * _angle;\n  vec2 posG = vUvScaled - dispG * _angle;\n  vec2 posB = vUvScaled - dispB * _angle;\n\n  vec4 pixelR = texture2D(tDiffuse, posR);\n  vec4 pixelG = texture2D(tDiffuse, posG);\n  vec4 pixelB = texture2D(tDiffuse, posB);\n  float alpha = (pixelR.a + pixelG.a + pixelB.a) / 3.0;\n\n  gl_FragColor = vec4(pixelR.r, pixelG.g, pixelB.b, alpha);\n}"},"customProperties":[{"type":{"custom":true,"dynamic":true,"type":0},"properties":{"name":"amount"},"animated":false,"keyframes":[{"value":10,"frame":0,"tween":1,"controlPoints":[[-10,0],[10,0]]}]},{"type":{"custom":true,"dynamic":true,"type":0},"properties":{"name":"time"},"animated":false,"keyframes":[{"value":0,"frame":0,"tween":1,"controlPoints":[[-10,0],[10,0]]}]},{"type":{"custom":true,"dynamic":true,"type":0},"properties":{"name":"angle"},"animated":false,"keyframes":[{"value":45,"frame":0,"tween":1,"controlPoints":[[-10,0],[10,0]]}]},{"type":{"custom":true,"group":true,"dynamic":true,"objects":[{"dynamic":true,"name":"X","type":0,"value":0},{"dynamic":true,"name":"Y","type":0,"value":0}],"type":1},"properties":{"name":"scale"},"objects":[{"animated":false,"keyframes":[{"value":1,"frame":0,"tween":1,"controlPoints":[[-10,0],[10,0]]}]},{"animated":false,"keyframes":[{"value":1,"frame":0,"tween":1,"controlPoints":[[-10,0],[10,0]]}]}]},{"type":{"custom":true,"group":true,"dynamic":true,"objects":[{"dynamic":true,"name":"X","type":0,"value":0},{"dynamic":true,"name":"Y","type":0,"value":0}],"type":1},"properties":{"name":"offset"},"objects":[{"animated":false,"keyframes":[{"value":0,"frame":0,"tween":1,"controlPoints":[[-10,0],[10,0]]}]},{"animated":false,"keyframes":[{"value":0,"frame":0,"tween":1,"controlPoints":[[-10,0],[10,0]]}]}]},{"type":{"custom":true,"group":true,"dynamic":true,"objects":[{"dynamic":true,"name":"R Factor","type":0,"value":0},{"dynamic":true,"name":"G Factor","type":0,"value":0},{"dynamic":true,"name":"B Factor","type":0,"value":0}],"type":2},"properties":{"name":"rgbDisplacement"},"objects":[{"animated":false,"keyframes":[{"value":1,"frame":0,"tween":1,"controlPoints":[[-10,0],[10,0]]}]},{"animated":false,"keyframes":[{"value":1,"frame":0,"tween":1,"controlPoints":[[-10,0],[10,0]]}]},{"animated":false,"keyframes":[{"value":1,"frame":0,"tween":1,"controlPoints":[[-10,0],[10,0]]}]}]},{"type":{"custom":true,"group":true,"dynamic":true,"objects":[{"dynamic":true,"name":"X","type":0,"value":0},{"dynamic":true,"name":"Y","type":0,"value":0},{"dynamic":true,"name":"Z","type":0,"value":0}],"type":2},"properties":{"name":"period"},"objects":[{"animated":false,"keyframes":[{"value":100,"frame":0,"tween":1,"controlPoints":[[-10,0],[10,0]]}]},{"animated":false,"keyframes":[{"value":100,"frame":0,"tween":1,"controlPoints":[[-10,0],[10,0]]}]},{"animated":false,"keyframes":[{"value":100,"frame":0,"tween":1,"controlPoints":[[-10,0],[10,0]]}]}]}]}],"baseType":"effect","assets":[]}]